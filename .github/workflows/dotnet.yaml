# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/github-workflow.json
name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_XMLDOC_MODE: ''
  DOTNET_MULTILEVEL_LOOKUP: 0

jobs:
  build:
    strategy:
      matrix:
        config:
          - Release
          - Debug

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # so that NerdBank.GitVersioning has access to history
    - name: Install Nix
      uses: cachix/install-nix-action@v29
      with:
        extra_nix_config: |
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    - name: Build source generator
      run: nix develop --command dotnet build WoofWare.Whippet/
    - name: Build solution
      run: nix develop --command dotnet build --configuration ${{matrix.config}}
    - name: Test
      run: nix develop --command dotnet test --no-build --verbosity normal --configuration ${{matrix.config}}

  analyzers:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # so that NerdBank.GitVersioning has access to history
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Prepare analyzers
        run: nix develop --command dotnet restore analyzers/analyzers.fsproj
      - name: Build project
        run: nix develop --command dotnet build ./WoofWare.Whippet/WoofWare.Whippet.fsproj
      - name: Run analyzers
        run: nix run .#fsharp-analyzers -- --project ./WoofWare.Whippet/WoofWare.Whippet.fsproj --analyzers-path ./.analyzerpackages/g-research.fsharp.analyzers/*/ --verbosity detailed --report ./analysis.sarif --treat-as-error GRA-STRING-001 GRA-STRING-002 GRA-STRING-003 GRA-UNIONCASE-001 GRA-INTERPOLATED-001 GRA-TYPE-ANNOTATE-001 GRA-VIRTUALCALL-001 GRA-IMMUTABLECOLLECTIONEQUALITY-001 GRA-JSONOPTS-001 GRA-LOGARGFUNCFULLAPP-001 GRA-DISPBEFOREASYNC-001 --exclude-analyzers PartialAppAnalyzer

#   build-nix:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#       - name: Install Nix
#         uses: cachix/install-nix-action@v29
#         with:
#           extra_nix_config: |
#             access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
#       - name: Build
#         run: nix build
#       - name: Reproducibility check
#         run: nix build --rebuild

  check-dotnet-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Run Fantomas
        run: nix run .#fantomas -- --check .

  check-nix-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Run Alejandra
        run: nix develop --command alejandra --check .

  linkcheck:
    name: Check links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Run link checker
        run: nix develop --command markdown-link-check README.md CONTRIBUTING.md

  flake-check:
    name: Check flake
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Flake check
        run: nix flake check

  nuget-pack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # so that NerdBank.GitVersioning has access to history
    - name: Install Nix
      uses: cachix/install-nix-action@v29
      with:
        extra_nix_config: |
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    - name: Build source generator
      run: nix develop --command dotnet build WoofWare.Whippet/
    - name: Build solution
      run: nix develop --command dotnet build --configuration Release
    - name: Pack
      run: nix develop --command dotnet pack --configuration Release
    - name: Upload NuGet artifact (runner)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-runner
        path: WoofWare.Whippet/bin/Release/WoofWare.Whippet.*.nupkg
    - name: Upload NuGet artifact (core)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-core
        path: WoofWare.Whippet.Core/bin/Release/WoofWare.Whippet.Core.*.nupkg
    - name: Upload NuGet artifact (Fantomas)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-fantomas
        path: WoofWare.Whippet.Fantomas/bin/Release/WoofWare.Whippet.Fantomas.*.nupkg
    - name: Upload NuGet artifact (JSON attrs)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-json-attrs
        path: Plugins/Json/WoofWare.Whippet.Plugin.Json.Attributes/bin/Release/WoofWare.Whippet.Plugin.Json.*.nupkg
    - name: Upload NuGet artifact (JSON plugin)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-json
        path: Plugins/Json/WoofWare.Whippet.Plugin.Json/bin/Release/WoofWare.Whippet.Plugin.Json.*.nupkg
    - name: Upload NuGet artifact (argparser attrs)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-argparser-attrs
        path: Plugins/ArgParser/WoofWare.Whippet.Plugin.ArgParser.Attributes/bin/Release/WoofWare.Whippet.Plugin.ArgParser.*.nupkg
    - name: Upload NuGet artifact (argparser plugin)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-argparser
        path: Plugins/ArgParser/WoofWare.Whippet.Plugin.ArgParser/bin/Release/WoofWare.Whippet.Plugin.ArgParser.*.nupkg
    - name: Upload NuGet artifact (httpclient attrs)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-httpclient-attrs
        path: Plugins/ArgParser/WoofWare.Whippet.Plugin.HttpClient.Attributes/bin/Release/WoofWare.Whippet.Plugin.HttpClient.*.nupkg
    - name: Upload NuGet artifact (httpclient plugin)
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-httpclient
        path: Plugins/ArgParser/WoofWare.Whippet.Plugin.HttpClient/bin/Release/WoofWare.Whippet.Plugin.HttpClient.*.nupkg

  expected-pack:
    needs: [nuget-pack]
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet artifact (runner)
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-runner
          path: packed-runner
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed-runner -maxdepth 1 -name 'WoofWare.Whippet.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi
      - name: Download NuGet artifact (core)
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-core
          path: packed-core
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed-core -maxdepth 1 -name 'WoofWare.Whippet.Core.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi
      - name: Download NuGet artifact (Fantomas)
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-fantomas
          path: packed-fantomas
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed-fantomas -maxdepth 1 -name 'WoofWare.Whippet.Fantomas.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi
      - name: Download NuGet artifact (JSON attrs)
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-json-attrs
          path: packed-json-attrs
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed-json-attrs -maxdepth 1 -name 'WoofWare.Whippet.Plugin.Json.Attributes.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi
      - name: Download NuGet artifact (JSON plugin)
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-json
          path: packed-json
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed-json -maxdepth 1 -name 'WoofWare.Whippet.Plugin.Json.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi
      - name: Download NuGet artifact (argparser attrs)
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-argparser-attrs
          path: packed-argparser-attrs
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed-argparser-attrs -maxdepth 1 -name 'WoofWare.Whippet.Plugin.ArgParser.Attributes.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi
      - name: Download NuGet artifact (argparser plugin)
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-argparser
          path: packed-argparser
      - name: Check NuGet contents
        # Verify that there is exactly one nupkg in the artifact that would be NuGet published
        run: if [[ $(find packed-argparser -maxdepth 1 -name 'WoofWare.Whippet.Plugin.ArgParser.*.nupkg' -printf c | wc -c) -ne "1" ]]; then exit 1; fi

  check-accurate-generations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # so that NerdBank.GitVersioning has access to history
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Whitespace change to invalidate all caches
        run: |
            find . -type f -name '*.fs' -exec bash -c "echo ' ' >> '{}'" \;
            find . -type f -name 'Generated*.fs' -exec bash -c "rm '{}'" \;
      - name: Build Whippet
        run: nix develop --command dotnet build WoofWare.Whippet
      - name: Generate code
        run: nix develop --command dotnet build
      - name: Run Fantomas
        run: nix run .#fantomas -- .
      - name: Verify there is no diff
        run: git diff --name-only --no-color --exit-code

  all-required-checks-complete:
    needs: [check-dotnet-format, check-nix-format, build, linkcheck, flake-check, nuget-pack, expected-pack, analyzers, check-accurate-generations]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: G-Research/common-actions/check-required-lite@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          needs-context: ${{ toJSON(needs) }}

  nuget-publish:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-runner
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}

  nuget-publish-fantomas:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-fantomas
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet.Fantomas
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}

  nuget-publish-json-plugin:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-json
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet.Plugin.Json
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}

  nuget-publish-json-attrs:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-json-attrs
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet.Plugin.Json.Attributes
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}

  nuget-publish-argparser-plugin:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-argparser
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet.Plugin.ArgParser
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}

  nuget-publish-argparser-attrs:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-argparser-attrs
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet.Plugin.ArgParser.Attributes
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}

  nuget-publish-httpclient-plugin:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-httpclient
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet.Plugin.HttpClient
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}

  nuget-publish-httpclient-attrs:
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork && github.ref == 'refs/heads/main' }}
    needs: [all-required-checks-complete]
    environment: main-deploy
    permissions:
      id-token: write
      attestations: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v29
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Download NuGet artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-httpclient-attrs
          path: packed
      - name: Identify `dotnet`
        id: dotnet-identify
        run: nix develop --command bash -c 'echo "dotnet=$(which dotnet)" >> $GITHUB_OUTPUT'
      - name: Publish to NuGet
        id: publish-success
        uses: G-Research/common-actions/publish-nuget@2b7dc49cb14f3344fbe6019c14a31165e258c059
        with:
          package-name: WoofWare.Whippet.Plugin.HttpClient.Attributes
          nuget-key: ${{ secrets.NUGET_API_KEY }}
          nupkg-dir: packed/
          dotnet: ${{ steps.dotnet-identify.outputs.dotnet }}
