namespace WoofWare.Whippet

(* File originally generated by Myriad. *)

/// Module containing JSON parsing methods for the FrameworkDescription type
[<RequireQualifiedAccess ; CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module FrameworkDescription =
    /// Parse from a JSON node.
    let jsonParse (node : System.Text.Json.Nodes.JsonNode) : FrameworkDescription =
        let arg_1 =
            (match node.["version"] with
             | null ->
                 raise (
                     System.Collections.Generic.KeyNotFoundException (
                         sprintf "Required key '%s' not found on JSON object" ("version")
                     )
                 )
             | v -> v)
                .AsValue()
                .GetValue<System.String> ()

        let arg_0 =
            (match node.["name"] with
             | null ->
                 raise (
                     System.Collections.Generic.KeyNotFoundException (
                         sprintf "Required key '%s' not found on JSON object" ("name")
                     )
                 )
             | v -> v)
                .AsValue()
                .GetValue<System.String> ()

        {
            Name = arg_0
            Version = arg_1
        }
namespace WoofWare.Whippet

/// Module containing JSON parsing methods for the RuntimeOptions type
[<RequireQualifiedAccess ; CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module RuntimeOptions =
    /// Parse from a JSON node.
    let jsonParse (node : System.Text.Json.Nodes.JsonNode) : RuntimeOptions =
        let arg_3 =
            match node.["rollForward"] with
            | null -> None
            | v -> v.AsValue().GetValue<System.String> () |> Some

        let arg_2 =
            match node.["frameworks"] with
            | null -> None
            | v ->
                v.AsArray ()
                |> Seq.map (fun elt -> FrameworkDescription.jsonParse elt)
                |> List.ofSeq
                |> Some

        let arg_1 =
            match node.["framework"] with
            | null -> None
            | v -> FrameworkDescription.jsonParse v |> Some

        let arg_0 =
            (match node.["tfm"] with
             | null ->
                 raise (
                     System.Collections.Generic.KeyNotFoundException (
                         sprintf "Required key '%s' not found on JSON object" ("tfm")
                     )
                 )
             | v -> v)
                .AsValue()
                .GetValue<System.String> ()

        {
            Tfm = arg_0
            Framework = arg_1
            Frameworks = arg_2
            RollForward = arg_3
        }
namespace WoofWare.Whippet

/// Module containing JSON parsing methods for the RuntimeConfig type
[<RequireQualifiedAccess ; CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module RuntimeConfig =
    /// Parse from a JSON node.
    let jsonParse (node : System.Text.Json.Nodes.JsonNode) : RuntimeConfig =
        let arg_0 =
            RuntimeOptions.jsonParse (
                match node.["runtimeOptions"] with
                | null ->
                    raise (
                        System.Collections.Generic.KeyNotFoundException (
                            sprintf "Required key '%s' not found on JSON object" ("runtimeOptions")
                        )
                    )
                | v -> v
            )

        {
            RuntimeOptions = arg_0
        }
